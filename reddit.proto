syntax = "proto3";

package reddit;

service RedditService {
    // Create a Post
    rpc CreatePost (CreatePostRequest) returns (CreatePostResponse);

    // Upvote or downvote a Post
    rpc VotePost (VotePostRequest) returns (VotePostResponse);

    // Retrieve Post content
    rpc GetPost (GetPostRequest) returns (GetPostResponse);

    // Create a Comment
    rpc CreateComment (CreateCommentRequest) returns (CreateCommentResponse);

    // Upvote or downvote a Comment
    rpc VoteComment (VoteCommentRequest) returns (VoteCommentResponse);

    // Retrieve a list of N most upvoted comments under a post
    rpc GetTopCommentsUnderPost (GetTopCommentsUnderPostRequest) returns (GetTopCommentsUnderPostResponse);

    // RPC to expand a comment branch to a depth of 2
    rpc ExpandCommentBranch (ExpandCommentBranchRequest) returns (ExpandCommentBranchResponse);
}

message CreatePostRequest {
    // Fields for creating a post
    string title = 1;
    string text = 2;
    oneof media {
        string image_url = 3;
        string video_url = 4;
    }
    string author = 5; // Optional
    string subreddit_id = 6; // ID of the subreddit to post to
    repeated string tags = 7; // Tags associated with the post
}

message CreatePostResponse {
    Post post = 1;  // Return the created Post object
}

message VotePostRequest {
    string post_id = 1;
    bool upvote = 2; // True for upvote, False for downvote
}

message VotePostResponse {
    string message = 1; // Acknowledgment message
}

message GetPostRequest {
    string post_id = 1; // ID of the post to retrieve
}

message GetPostResponse {
    Post post = 1; // The requested post
}

message CreateCommentRequest {
    string text = 1;
    string author = 2; // Author's user ID
    oneof parent {
        string parent_post_id = 3;
        string parent_comment_id = 4;
    }
}

message CreateCommentResponse {
    Comment comment = 1;  // Return the created Comment object
}

message VoteCommentRequest {
    string comment_id = 1;
    bool upvote = 2; // True for upvote, False for downvote
}

message VoteCommentResponse {
    string message = 1; // Acknowledgment message
}

message GetTopCommentsUnderPostRequest {
    string post_id = 1;
    int32 count = 2;
}

message GetTopCommentsUnderPostResponse {
    repeated Comment comments = 1; // List of top comments
}

message ExpandCommentBranchRequest {
    string comment_id = 1;
    int32 count = 2; // Number of top comments to retrieve at each level
}

// Response structure for a comment branch of depth 2
message ExpandCommentBranchResponse {
    repeated CommentNode comment_nodes = 1; // A tree of comments up to depth 2
}

message User {
    string user_id = 1;  // A human-readable user ID
}

message Post {
    string post_id = 1;
    string title = 2;
    string text = 3;
    oneof media {
        string image_url = 4;
        string video_url = 5;
    }
    string author = 6;  // Optional
    int32 score = 7;    // Can be negative
    enum State {
        NORMAL = 0;
        LOCKED = 1;
        HIDDEN = 2;
    }
    State state = 8;
    string publication_date = 9;
    string subreddit_id = 10;  // ID of the subreddit the post belongs to
    repeated string tags = 11;  // Tags associated with the post
}

message Comment {
    string comment_id = 1;
    string text = 2;
    string author = 3;  // Always required for comments
    int32 score = 4;
    enum Status {
        NORMAL = 0;
        HIDDEN = 1;
    }
    Status status = 5;
    string publication_date = 6;

    // Reference either a parent post or a parent comment
    oneof parent {
        string parent_post_id = 7;
        string parent_comment_id = 8;
    }

    // Indicates whether this comment has replies
    bool has_replies = 9;
}

// Recursive structure to hold a comment and (potentially) its top replies
message CommentNode {
    Comment comment = 1;
    repeated Comment children = 2;  // Replies to this comment
}

message Subreddit {
    string subreddit_id = 1;
    string name = 2;
    enum Visibility {
        PUBLIC = 0;
        PRIVATE = 1;
        HIDDEN = 2;
    }
    Visibility visibility = 3;
    // Available tags for posts within this subreddit
    repeated string tags = 4;
    repeated string post_ids = 5;  // IDs of posts in this subreddit
}